{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPyEasUGZc7P2C5wCSFcBGA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**PYTHON ASSIGNMENT**"],"metadata":{"id":"i7h5JPWdlevX"}},{"cell_type":"markdown","source":["1.Three friends started a company with a lot of effort and they wanted to name it with all three friends starting letters being arranged in alphabetical order.Write a python program to do the same.\n","\n","Example:\n","Input= [\"Ram\",\"Rohan\",\"Raheem\"]\n","Output=\"RRR\""],"metadata":{"id":"89mnEB7Xl3Gq"}},{"cell_type":"code","source":["#(01)Asking user to enter three names and store them in variables \n","'''a, b, and c in the form of tuple'''\n","a=input('Enter the first name: ')\n","b=input('Enter the second name: ')\n","c=input('Enter third name: ')\n","\n","names=(a,b,c)\n","\n","#Define a function that takes in a tuple of names and returns their initials\n","def name_initials(names):\n","    # Initialize an empty string for the initials\n","    initials = \"\"\n","\n","    #Name in the sorted list of names\n","    for name in sorted(names):\n","\n","        ''' Extract the first letter from the current name and \n","              Concatenate the initial to the existing initials string'''\n","        initials= initials + name[0]\n","    return initials\n","\n","# Call the name_initials function with the names tuple as input and print the result\n","print(name_initials(names))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_HqQfR-C1dDR","executionInfo":{"status":"ok","timestamp":1683647339621,"user_tz":-330,"elapsed":13621,"user":{"displayName":"Shashank N 22266408101","userId":"07398488784665405452"}},"outputId":"1f451e46-e11a-44db-d295-941edc8cd599"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first name: Royal\n","Enter the second name: Challenges \n","Enter third name: Bangalore \n","BCR\n"]}]},{"cell_type":"markdown","source":["2. Kid Jay is very curious to know about the leap year, he asked his grandpa about the leap year. After explaining his grandpa told him to tell the leap years in the coming next 15 years. Help him to generate the list of leap years in the next 15 leap years starting from a given year.Populate the leap years into a list and display the list.\n","\n","Example:\n","Input: 2000\n","Output: [2000, 2004, 2008, 2012]"],"metadata":{"id":"9Ui4HVj11lTe"}},{"cell_type":"code","source":["#(02)This function takes an initial year as input and returns a list of the \n","   # Next four leap years starting from that initial year.\n","def func(initial):\n","\n","  # Initialize an empty list to store the leap years\n","  leapyear=[]\n","  # Set the current year to the initial year provided\n","  year=initial\n","  # Loop until we've added four leap years to the list\n","  while len(leapyear)<4:\n","\n","    # Check if the current year is a leap year or not\n","    if (year%4==0 and year %100!=0) or year%400==0:\n","      # If it's a leap year, add it to the list\n","      leapyear.append(year)\n","    year+=1\n","  return leapyear\n","\n","initial=int(input(\"enter the initial year:\"))\n","# Call the `func` function with the initial year as an argument\n","leapyear=func(initial)\n","print(leapyear)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ddckc0KZ1-2_","executionInfo":{"status":"ok","timestamp":1683647365860,"user_tz":-330,"elapsed":4921,"user":{"displayName":"Shashank N 22266408101","userId":"07398488784665405452"}},"outputId":"3cc6d9ad-6a64-4afc-c80c-d78c13cd8e4e"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["enter the initial year:2000\n","[2000, 2004, 2008, 2012]\n"]}]},{"cell_type":"markdown","source":["3. Wite python programs using the concept of Regular Expression:"],"metadata":{"id":"egPkLaRn2EuY"}},{"cell_type":"markdown","source":["a.You want to match any string that starts with \"http://\" or \"https://\", followed by any combination of letters,numbers, and special characters."],"metadata":{"id":"pSBNuynz_E5K"}},{"cell_type":"code","source":["\n","#(03)Using Regular expressions\n","import re\n","\n","#define a list called Strings containing three URL's\n","string = [\"http://flipkart.com\", \"https://www.google.com\",\"https://bt4g.org\"]\n","\n","#regex pattern x that matches URLs starting with either http:// or https://\n","x = r'^https?://'\n","\n","'''We loop through each URL in the string list and check whether it matches \n","the regex pattern or not'''\n","for i in string:\n","  if re.match(x,i):\n","    print(f\"{i} is a valid URL\")\n","  else:\n","    print (f\"{i} is not a valid URL\")"],"metadata":{"id":"Ai8PtukV2tmX","executionInfo":{"status":"ok","timestamp":1683647387019,"user_tz":-330,"elapsed":462,"user":{"displayName":"Shashank N 22266408101","userId":"07398488784665405452"}},"outputId":"5fef639e-0091-4265-c871-63735107702f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["http://flipkart.com is a valid URL\n","https://www.google.com is a valid URL\n","https://bt4g.org is a valid URL\n"]}]},{"cell_type":"markdown","source":["b.You need to extract all the dates from a block of text in the format \"mm/dd/yyyy\"."],"metadata":{"id":"HEj2haWm_JL9"}},{"cell_type":"code","source":["import re\n","\n","'''This assigns a string to the variable x. \n","The string contains multiple dates in the format of MM/DD/YYYY'''\n","x=\"Today is 05/04/2023 and tomorrow is 05/05/2023. Yesterday was 05/03/2023.\"\n","\n","regex =r'\\d{2}/\\d{2}/\\d{4}'\n","\n","#Return all the dates from x\n","dates = re.findall (regex,x)\n","print(dates)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h37WeLLX9bMo","executionInfo":{"status":"ok","timestamp":1683647693723,"user_tz":-330,"elapsed":21,"user":{"displayName":"Shashank N 22266408101","userId":"07398488784665405452"}},"outputId":"3cf5d126-c5ec-4906-b944-9169c69bd064"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["['05/04/2023', '05/05/2023', '05/03/2023']\n"]}]}]}